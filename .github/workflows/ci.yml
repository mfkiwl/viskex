name: viskex CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - backend: none
            container: debian:testing
            setup_git: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq git
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq python3-mpi4py python3-pip xvfb
              echo "OMPI_ALLOW_RUN_AS_ROOT=1" >> $GITHUB_ENV
              echo "OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1" >> $GITHUB_ENV
              rm /usr/lib/python3.*/EXTERNALLY-MANAGED
          - backend: petsc4py-real
            container: numericalpdes/base_images:petsc4py-real
            setup_git: ""
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq xvfb
              echo "OMPI_ALLOW_RUN_AS_ROOT=1" >> $GITHUB_ENV
              echo "OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1" >> $GITHUB_ENV
              rm /usr/local/lib/python3.11/site-packages/petsc4py/py.typed
          - backend: petsc4py-complex
            container: numericalpdes/base_images:petsc4py-complex
            setup_git: ""
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq xvfb
              echo "OMPI_ALLOW_RUN_AS_ROOT=1" >> $GITHUB_ENV
              echo "OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1" >> $GITHUB_ENV
              rm /usr/local/lib/python3.11/site-packages/petsc4py/py.typed
          - backend: dolfinx-real
            container: ghcr.io/fenics/dolfinx/dolfinx:nightly
            setup_git: ""
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq xvfb
              . /usr/local/bin/dolfinx-real-mode
              echo "PETSC_ARCH=$PETSC_ARCH" >> $GITHUB_ENV
              echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
              echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
              echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
              echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
              rm /usr/local/lib/python3.10/dist-packages/petsc4py/py.typed
          - backend: dolfinx-complex
            container: ghcr.io/fenics/dolfinx/dolfinx:nightly
            setup_git: ""
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq xvfb
              . /usr/local/bin/dolfinx-complex-mode
              echo "PETSC_ARCH=$PETSC_ARCH" >> $GITHUB_ENV
              echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
              echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
              echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
              echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
              rm /usr/local/lib/python3.10/dist-packages/petsc4py/py.typed
          - backend: firedrake-real
            container: firedrakeproject/firedrake
            setup_git: ""
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq xvfb
              rm /home/firedrake/firedrake/lib/python3.10/site-packages/petsc4py/py.typed
              FIREDRAKE_BIN="/home/firedrake/firedrake/bin"
              ln -s $FIREDRAKE_BIN/mpiexec $FIREDRAKE_BIN/mpirun
              echo $FIREDRAKE_BIN >> $GITHUB_PATH
          - backend: firedrake-complex
            container: firedrakeproject/firedrake-complex
            setup_git: ""
            setup_container: |
              export DEBIAN_FRONTEND="noninteractive"
              apt update -y -q
              apt install -y -qq xvfb
              rm /home/firedrake/firedrake/lib/python3.10/site-packages/petsc4py/py.typed
              FIREDRAKE_BIN="/home/firedrake/firedrake/bin"
              ln -s $FIREDRAKE_BIN/mpiexec $FIREDRAKE_BIN/mpirun
              echo $FIREDRAKE_BIN >> $GITHUB_PATH
      fail-fast: false
    container:
      image: ${{ matrix.container }}
      options: --user root
    steps:
      - name: Setup git
        run: ${{ matrix.setup_git }}
      - uses: actions/checkout@v4
      - name: Setup container
        run: ${{ matrix.setup_container }}
      - name: Install viskex
        run: |
          if [[ "${{ matrix.backend }}" == "dolfinx"* ]]; then
            python3 -m pip install .[backend_dolfinx,docs,lint,tests,tutorials]
          elif [[ "${{ matrix.backend }}" == "firedrake"* ]]; then
            python3 -m pip install .[backend_firedrake,docs,lint,tests,tutorials]
          else
            python3 -m pip install .[docs,lint,tests,tutorials]
          fi
      - name: Clean build files
        run: |
          git config --global --add safe.directory $PWD
          git clean -xdf
      - name: Update ruff configuration
        run: |
          declare -a RUFF_EXCLUDE
          if [[ "${{ matrix.backend }}" != "dolfinx"* ]]; then
            sed -i "s@from viskex.dolfinx_plotter import DolfinxPlotter@# line removed by CI@g" viskex/__init__.py
            sed -i "s@dolfinx = DolfinxPlotter@# line removed by CI@g" viskex/__init__.py
            RUFF_EXCLUDE+=("viskex/dolfinx_plotter.py" "tests/notebooks/common_dolfinx.py")
          fi
          if [[ "${{ matrix.backend }}" != "firedrake"* ]]; then
            sed -i "s@from viskex.firedrake_plotter import FiredrakePlotter@# line removed by CI@g" viskex/__init__.py
            sed -i "s@firedrake = FiredrakePlotter@# line removed by CI@g" viskex/__init__.py
            RUFF_EXCLUDE+=("viskex/firedrake_plotter.py" "tests/notebooks/common_firedrake.py")
          fi
          if [[ ${RUFF_EXCLUDE[@]} ]]; then
            RUFF_EXCLUDE_STRING="${RUFF_EXCLUDE[@]}"
            RUFF_EXCLUDE_STRING="\"${RUFF_EXCLUDE_STRING// /\", \"}\""
            sed -i "s@\[tool\.ruff\]@[tool.ruff]\nexclude = [${RUFF_EXCLUDE_STRING}]@g" pyproject.toml
          fi
        shell: bash
      - name: Update mypy configuration
        run: |
          declare -a MYPY_EXCLUDE
          if [[ "${{ matrix.backend }}" != "dolfinx"* ]]; then
            MYPY_EXCLUDE+=('^viskex/dolfinx_plotter\\\\.py\$' '^tests/notebooks/common_dolfinx\\\\.py\$')
            sed -i 's@    # "dolfinx",@    "dolfinx",@g' pyproject.toml
            sed -i 's@    # "dolfinx.*",@    "dolfinx.*",@g' pyproject.toml
          fi
          if [[ "${{ matrix.backend }}" != "firedrake"* ]]; then
            MYPY_EXCLUDE+=('^viskex/firedrake_plotter\\\\.py\$' '^tests/notebooks/common_firedrake\\\\.py\$')
          fi
          if [[ ${MYPY_EXCLUDE[@]} ]]; then
            MYPY_EXCLUDE_STRING="${MYPY_EXCLUDE[@]}"
            MYPY_EXCLUDE_STRING="${MYPY_EXCLUDE_STRING// /|}"
            sed -i "s@\[tool\.mypy\]@[tool.mypy]\nexclude = \"(${MYPY_EXCLUDE_STRING})\"@g" pyproject.toml
          fi
        shell: bash
      - name: Run ruff on python files
        run: |
          python3 -m ruff .
      - name: Run isort on python files
        run: |
          python3 -m isort --check --diff .
      - name: Run mypy on python files
        run: |
          python3 -m mypy --exclude=conftest.py .
          python3 -m mypy tests/notebooks/conftest.py
          python3 -m mypy tests/unit/conftest.py
          python3 -m mypy tutorials/conftest.py
      - name: Run yamllint on workflows
        run: |
          python3 -m yamllint -d "{extends: default, rules: {document-start: {present: false}, line-length: disable, truthy: {check-keys: false}}}" .
      - name: Run documentation generation
        run: |
          cd docs && python3 -m sphinx -W -b html . build/html
      - name: Run unit tests (serial)
        run: |
          COVERAGE_FILE=.coverage_unit_serial python3 -m coverage run --source=viskex -m pytest tests/unit
      - name: Run unit tests (parallel)
        run: |
          COVERAGE_FILE=.coverage_unit_parallel mpirun -n 2 python3 -m coverage run --source=viskex --parallel-mode -m pytest tests/unit
      - name: Generate notebooks files
        run: |
          NO_TESTS_COLLECTED=5
          python3 -m pytest --ipynb-action=create-notebooks tests/notebooks || (($?==$NO_TESTS_COLLECTED))
          python3 -m pytest --ipynb-action=create-notebooks tutorials || (($?==$NO_TESTS_COLLECTED))
          python3 -m pytest --ipynb-action=create-notebooks --np=2 tests/notebooks || (($?==$NO_TESTS_COLLECTED))
          python3 -m pytest --ipynb-action=create-notebooks --np=2 tutorials || (($?==$NO_TESTS_COLLECTED))
        shell: bash
      - name: Update nbqa configuration
        run: |
          declare -a NBQA_EXCLUDE
          if [[ "${{ matrix.backend }}" != "dolfinx"* ]]; then
            NBQA_EXCLUDE+=('^tests/notebooks/test_.*_dolfinx' '^tests/notebooks/.*/test_.*_dolfinx' '^tutorials/.*/tutorial_.*_dolfinx')
          fi
          if [[ "${{ matrix.backend }}" != "firedrake"* ]]; then
            NBQA_EXCLUDE+=('^tests/notebooks/test_.*_firedrake' '^tests/notebooks/.*/test_.*_firedrake' '^tutorials/.*/tutorial_.*_firedrake')
          fi
          if [[ ${NBQA_EXCLUDE[@]} ]]; then
            NBQA_EXCLUDE_STRING="${NBQA_EXCLUDE[@]}"
            NBQA_EXCLUDE_STRING="${NBQA_EXCLUDE_STRING// /|}"
            echo "[tool.nbqa.exclude]" >> pyproject.toml
            echo "ruff = \"(${NBQA_EXCLUDE_STRING})\"" >> pyproject.toml
            echo "mypy = \"(${NBQA_EXCLUDE_STRING})\"" >> pyproject.toml
          fi
        shell: bash
      - name: Run ruff on notebooks files
        run: |
          python3 -m nbqa ruff .
      - name: Run isort on notebooks files
        run: |
          python3 -m nbqa isort --check --diff .
      - name: Run mypy on notebooks files
        run: |
          python3 -m nbqa mypy .
      - name: Check for stray outputs, counts and metadata in ipynb files
        uses: RBniCS/check-jupyter-metadata-action@main
        with:
          pattern: "**/*.ipynb"
      - name: Run notebooks tests (serial)
        run: |
          export DISPLAY=":99"
          Xvfb $DISPLAY -screen 0 1024x768x24 > /dev/null 2>&1 &
          for VISKEX_PYVISTA_BACKEND in "client" "html" "none" "server" "static"; do
            echo "Testing ${VISKEX_PYVISTA_BACKEND} pyvista backend"
            COVERAGE_FILE=.coverage_notebooks_serial_${VISKEX_PYVISTA_BACKEND} VISKEX_PYVISTA_BACKEND=${VISKEX_PYVISTA_BACKEND} python3 -m pytest --coverage-source=viskex tests/notebooks
          done
      - name: Run notebooks tests (parallel)
        run: |
          COVERAGE_FILE=.coverage_notebooks_parallel VISKEX_PYVISTA_BACKEND="none" python3 -m pytest --coverage-source=viskex --np=2 tests/notebooks
      - name: Upload notebooks tests logs as an artifact in case of failure
        if: failure() || cancelled()
        uses: actions/upload-artifact@v3
        with:
          name: "tests-notebooks-logs-${{ matrix.backend }}"
          path: |
            tests/notebooks/**/.ipynb_pytest/**/*.log*
      - name: Run tutorials (serial)
        run: |
          export DISPLAY=":99"
          Xvfb $DISPLAY -screen 0 1024x768x24 > /dev/null 2>&1 &
          for VISKEX_PYVISTA_BACKEND in "client" "html" "none" "server" "static"; do
            echo "Testing ${VISKEX_PYVISTA_BACKEND} pyvista backend"
            VISKEX_PYVISTA_BACKEND=${VISKEX_PYVISTA_BACKEND} python3 -m pytest tutorials
          done
      - name: Run tutorials (parallel)
        run: |
          VISKEX_PYVISTA_BACKEND="none" python3 -m pytest --np=2 tutorials
      - name: Store coverage reports as artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.backend }}
          path: |
            .coverage*
          retention-days: 1
      - name: Upload tutorials logs as an artifact in case of failure
        if: failure() || cancelled()
        uses: actions/upload-artifact@v3
        with:
          name: "tutorials-logs-${{ matrix.backend }}"
          path: |
            tutorials/**/.ipynb_pytest/**/*.log*

  combine_coverage:
    runs-on: ubuntu-latest
    container: debian:testing
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Setup container
        run: |
          export DEBIAN_FRONTEND="noninteractive"
          apt update -y -q
          apt install -y -qq python3-pip
          rm /usr/lib/python3.*/EXTERNALLY-MANAGED
          python3 -m pip -q install coverage[toml]
      - name: Download coverage reports from artifacts
        uses: actions/download-artifact@v3
      - name: Combine coverage reports
        run: |
          python3 -m coverage combine coverage-*/.coverage*
          python3 -m coverage report --fail-under=100 --show-missing --skip-covered

  warn:
    runs-on: ubuntu-latest
    if: github.repository == 'viskex/viskex' && github.ref == 'refs/heads/main' && github.event_name == 'schedule'
    steps:
      - name: Warn if scheduled workflow is about to be disabled
        uses: fem-on-colab/warn-workflow-about-to-be-disabled-action@main
        with:
          workflow-filename: ci.yml
          days-elapsed: 55
